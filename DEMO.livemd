# Demo

```elixir
Mix.install([
  {:type_class, "~> 1.2"},
  {:witchcraft, "~> 1.0"},
  {:measurements, path: "."},
  {:vega_lite, "~> 0.1.6"},
  {:kino_vega_lite, "~> 0.1.7"}
])

alias VegaLite, as: Vl
```

## Introduction

`measurements` is a package helping with manipulation of real physics quantities.

## Usage

A measurement value is just a struct that can be easily created like so:

<!-- livebook:{"reevaluate_automatically":true} -->

```elixir
Measurements.length(4, :kilometer)
```

<!-- livebook:{"reevaluate_automatically":true} -->

```elixir
Measurements.Value.new(4, :kilometer)
```

If desired, an associated error can be added onto that measurement

<!-- livebook:{"reevaluate_automatically":true} -->

```elixir
Measurements.Value.new(300, :second) |> Measurements.Value.add_error(4, :millisecond)
```

<!-- livebook:{"reevaluate_automatically":true} -->

```elixir
Measurements.time(300, :second, 1)
```

A measurement can be converted to another unit of the same dimension

<!-- livebook:{"reevaluate_automatically":true} -->

```elixir
Measurements.time(300, :second, 5) |> Measurements.Value.convert(:microsecond)
```

The best unit is chosen to avoid loosing precision. If the target unit is not better than the current one, the conversion is simply ignored.

<!-- livebook:{"reevaluate_automatically":true} -->

```elixir
Measurements.time(300, :millisecond, 5) |> Measurements.Value.convert(:second)
```

A `:force` option is available, should anyone wish to force conversion at some point in their computation. But such a default allows to operate on measurements without knowing their precision, while remaining confident no precision in lost in various computations.

## Arithmetic

### Addition

`Measurements` support addition with automated conversion, provided the unit dimension matches.

<!-- livebook:{"reevaluate_automatically":true} -->

```elixir
m1 = Measurements.length(4, :millimeter)
m2 = Measurements.length(543, :micrometer, 2)

Measurements.sum(m1, m2)
```

Otherwise an explicit error with clean measurement representation is displayed:

<!-- livebook:{"reevaluate_automatically":true} -->

```elixir
m1 = Measurements.time(4, :second) |> Measurements.Value.add_error(5, :millisecond)
m2 = Measurements.length(543, :micrometer)
Measurements.sum(m1, m2)
```

### Scaling

Scaling the `Measurement` by a constant is also supported. Note the scale also applies to the error.

<!-- livebook:{"reevaluate_automatically":true} -->

```elixir
m1 = Measurements.time(4, :second) |> Measurements.Value.add_error(5, :millisecond)
Measurements.scale(m1, 60)
```

### Difference

Therefore difference of two measurements with unit of same dimension is also supported.

A more convenient `delta/2` function is provided for this purpose.

<!-- livebook:{"reevaluate_automatically":true} -->

```elixir
m1 = Measurements.length(4, :millimeter)
m2 = Measurements.length(543, :micrometer, 2)

Measurements.delta(m1, m2)
```

### Ratio

The ratio of two measurement is also supported.

The result will be a measurement, with its unit adjusted.
Therefore the `nil` Unit is just a constant, with potentially an error...

<!-- livebook:{"reevaluate_automatically":true} -->

```elixir
m1 = Measurements.length(4, :millimeter)
m2 = Measurements.length(543, :micrometer, 2)
Measurements.ratio(m1, m2)
```

We can verify this result, and maybe get an exact match, even if the value is a float:

```elixir
[
  Measurements.ratio(m1, m2).value * 0.543 == 4,
  # relative error recovery is a bit more involved.
  # Refer to Error propagation theory when in doubt (TODO link?)
  Measurements.ratio(m1, m2).error * 543 / 2 == Measurements.ratio(m1, m2).value
]
```

### TODO : Product

This will require more involved unit dimension manipulation...

## Measurement Stream

Usually measurements done come one at a time, but as a stream of events. Therefore they depend on the time when the measurement was made. This time, measured locally, has a specific meaning for our stream of measurements.

<!-- livebook:{"break_markdown":true} -->

### Local Timestamp

<!-- livebook:{"break_markdown":true} -->

A Local timestamp contains  the node identifier as well as the monotonic time for this node, a unit and the vm_offset to retrieve the cluster time:

<!-- livebook:{"reevaluate_automatically":true} -->

```elixir
Measurements.Timestamp.now()
```

#### Delta

<!-- livebook:{"break_markdown":true} -->

As a specific operation that makes sense on localtime, there is `delta/2` that computes the difference. However if both timestamp come from the same node, the difference will only take in account monotonic time, following good distributed time management practices with the BEAM.

<!-- livebook:{"reevaluate_automatically":true} -->

```elixir
before = Measurements.Timestamp.now()
Process.sleep(1000)
now = Measurements.Timestamp.now()
Measurements.Timestamp.delta(now, before)
```

Implicit conversion is also handled, albeit with `System` module directly without relying on `Measurements` features for simplicity.

<!-- livebook:{"reevaluate_automatically":true} -->

```elixir
before = Measurements.Timestamp.now(:millisecond)
Process.sleep(1000)
now = Measurements.Timestamp.now(:microsecond)
Measurements.Timestamp.delta(now, before)
```

#### Between

<!-- livebook:{"break_markdown":true} -->

A special operation on Timestamp is `between/2` to compute the timestamp (with error) between two timestamps. This is useful to have a Timestamp representing something observed at an uncertain point in time, like when doing a remote request for example.

```elixir
before = Measurements.Timestamp.now() |> IO.inspect()
Process.sleep(1000)
now = Measurements.Timestamp.now() |> IO.inspect()
Measurements.Timestamp.between(now, before)
```

### The Stream

## Discrete Calculus

With the capabilities in Measurements so far, we can already implement some basic discrete calculus on physical quantities.

<!-- livebook:{"break_markdown":true} -->

### Local Discrete Derivative

TODO

<!-- livebook:{"break_markdown":true} -->

### Local Discrete Integral

TODO

## Iterative Control
